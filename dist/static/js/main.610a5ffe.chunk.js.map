{"version":3,"sources":["components/auth/SignIn.js","store/actions/authActions.js","components/auth/SignUp.js","components/projects/ProjectListItem.js","components/projects/ProjectList.js","components/dashboard/Notifications.js","components/dashboard/Dashboard.js","components/layout/SignedInOptions.js","components/layout/SignedOutOptions.js","components/layout/Navbar.component.js","components/projects/CreateProject.js","store/actions/projectActions.js","components/projects/ProjectDetails.js","App.js","config/fbConfig.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","index.js"],"names":["SignIn","state","email","password","handleSubmit","e","preventDefault","props","signIn","handleInputChange","setState","target","id","value","this","authError","auth","uid","to","className","onSubmit","htmlFor","type","onChange","Component","connect","firebase","dispatch","credentials","getState","getFirebase","signInWithEmailAndPassword","then","catch","error","SignUp","firstName","lastName","signUp","newUser","getFirestore","firestore","createUserWithEmailAndPassword","res","collection","doc","user","set","ProjectListItem","project","title","authorFirstName","moment","createdAt","toDate","format","ProjectsList","projects","map","key","Notifications","notifications","notification","content","time","fromNow","Dashboard","ProjectList","compose","console","log","ordered","firestoreConnect","order","limit","orderBy","signOut","onClick","SignedOutOptions","visibleLinks","CreateProject","addProject","db","profile","userID","add","authorLastName","authorID","Date","ownProps","match","params","data","App","exact","path","component","DashBoard","ProjectDetails","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Boolean","window","location","hostname","initialState","authReducer","action","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.610a5ffe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { signIn } from '../../store/actions/authActions';\n\nexport class SignIn extends Component {\n\n    state = {\n        email: '',\n        password: ''\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.signIn(this.state)\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.id] :e.target.value\n        })\n    }\n\n    render() {\n        const { authError, auth } = this.props\n        // redirect if logged in//\n        if(auth.uid) return <Redirect to='/'/>\n        //else render component//\n        return (\n            <div className='container'>\n                <form onSubmit={this.handleSubmit} className='sign-in-form'>\n                    <h4>Sign In</h4>\n                    {/* conditional rendering for error*/}\n                    { authError ? <p>{authError}</p> : null} \n                    {/* ------------------------------ */}\n                    <div className='input-field'>\n                        <label htmlFor='email'>Email</label>\n                        <input type='email' id='email' onChange={this.handleInputChange}/>\n                    </div>\n                    <div className='input-field'>\n                        <label htmlFor='password'>Password</label>\n                        <input type='password' id='password' onChange={this.handleInputChange} />\n                    </div>\n                    <div className='input-field'>\n                        <button className='btn lighten-1'>Login</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        authError: state.auth.authError,\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        signIn: (credentials) => dispatch(signIn(credentials))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps) (SignIn)\n","export const signIn = (credentials) => {\n    return (dispatch, getState, {getFirebase}) => {\n        \n        //initiate firebase //\n        const firebase = getFirebase()\n        //send sign in req  with credentials supplied//\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({type: 'SIGN_IN_SUCCESS'})\n        }).catch((error) => {\n            dispatch({type: 'SIGN_IN_FAIL', error})\n        })\n    }\n}\n\nexport const signOut = () => {\n    return (dispatch, getState, { getFirebase }) => {\n        const firebase = getFirebase()\n\n        firebase.auth().signOut().then(() => {\n            dispatch({type: 'SIGN_OUT_SUCCESS'})\n        })\n    }\n}\n\nexport const signUp = (newUser) => {\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        const firebase = getFirebase()\n        const firestore = getFirestore()\n\n        //create a firebase auth account//\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then((res) => {\n            //create a firestore 'user' document with provided data corresponding to firebase auth id//\n            return firestore.collection('users').doc(res.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName\n            })\n        }).then(()=>{\n            //dispactch action if everything goes right//\n            dispatch({type: 'SIGN_UP_SUCCESS'})\n        }).catch((error) => {\n            //catch and dispacth error if occured//\n            dispatch({type: 'SIGN_UP_FAIL', error})\n        })\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { signUp } from '../../store/actions/authActions';\n\nexport class SignUp extends Component {\n\n    state = {\n        email: '',\n        password: '',\n        firstName: '',\n        lastName: ''\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.signUp(this.state)\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.id] :e.target.value\n        })\n    }\n\n    render() {\n        const { auth } = this.props\n        // redirect if logged in//\n        if(auth.uid) return <Redirect to='/'/>\n        //else render component//\n        return (\n            <div className='container'>\n                <form onSubmit={this.handleSubmit} className='sign-up-form'>\n                    <h4>Sign Up</h4>\n                    <div className='input-field'>\n                        <label htmlFor='firstName'>FirstName</label>\n                        <input type='text' id='firstName' onChange={this.handleInputChange} />\n                    </div>\n                    <div className='input-field'>\n                        <label htmlFor='lastName'>LastName</label>\n                        <input type='text' id='lastName' onChange={this.handleInputChange} />\n                    </div>\n                    <div className='input-field'>\n                        <label htmlFor='email'>Email</label>\n                        <input type='email' id='email' onChange={this.handleInputChange}/>\n                    </div>\n                    <div className='input-field'>\n                        <label htmlFor='password'>Password</label>\n                        <input type='password' id='password' onChange={this.handleInputChange} />\n                    </div>\n                    <div className='input-field'>\n                        <button className='btn lighten-1'>Sign Up</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        auth: state.firebase.auth\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signUp: (newUser) => dispatch(signUp(newUser))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\n","import moment from 'moment';\nimport React from 'react';\n\nconst ProjectListItem = ({project}) => {\n    return (\n        <div className='project-list-item card'>\n            <span className='card-title'>{project.title}</span>\n            <p>Added By: {project.authorFirstName}</p>\n            <p className='light-text'>{moment(project.createdAt.toDate()).format('MMM Do YYYY')}</p>\n        </div>\n    )\n}\n\nexport default ProjectListItem\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ProjectsListItem from './ProjectListItem';\n\nconst ProjectsList = ({projects}) => {\n    return (\n        <div className='section project-list'>\n            { projects && projects.map(project => {\n                return(\n                    <Link  key={project.id} to={'/projects/' + project.id}>\n                        <ProjectsListItem project={project}/>\n                    </Link>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ProjectsList\n","import moment from 'moment';\nimport React from 'react';\n\nconst Notifications = (props) => {\n    const {notifications} = props\n    return (\n        <div className='notification-center section'>\n            <div className='card z-depth-0'>\n                <div className='card-content'>\n                    <div className='card-title'> Notifications</div>\n                    <ul className='notifications'>\n                        {/* render notifications if exist - may change this with reusable component*/}\n                        { notifications && notifications.map(notification => {\n                            return(\n                                <li key={notification.id}>\n                                    <span>{notification.user} </span>\n                                    <span>{notification.content}</span>\n                                    <div>\n                                        {moment(notification.time.toDate()).fromNow()}\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Notifications\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { Redirect } from 'react-router-dom';\nimport { compose } from 'redux';\n\nimport ProjectList from '../projects/ProjectList';\nimport Notifications from './Notifications';\n\nclass Dashboard extends Component{\n    render(){\n        const {projects, notifications, auth} = this.props\n        // for route guarding//\n        if(!auth.uid) return <Redirect to='/signin'/>\n        // -----------------//\n        return(\n            <div className='container dashboard'>\n                <div className='row'>\n                    <div className='col s12 m6'>\n                        <ProjectList projects={projects}/>\n                    </div>\n                    <div className='col s12 m5'>\n                        <Notifications notifications={notifications}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n//to get state from reducer//\nconst mapStateToProps = (state) => {\n    console.log(state)\n    return { \n        projects: state.firestore.ordered.projects,\n        notifications: state.firestore.ordered.notifications,\n        auth: state.firebase.auth\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'projects', order: ['createdAt', 'desc']},\n        { collection: 'notifications', limit: 5, orderBy: ['time', 'desc']}\n    ])\n)(Dashboard)","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport { signOut } from '../../store/actions/authActions';\n\nconst SignedInOptions = (props) => {\n    return(\n        <ul className='right navigation-links'>\n            <li><NavLink to='/create'>New Project</NavLink></li>\n            <li><a onClick={props.signOut}>Logout</a></li>\n            <li><NavLink to='/' className='btn btn-floating white'>U</NavLink></li>\n        </ul>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        signOut : () => dispatch(signOut())\n    }\n}\nexport default connect(null, mapDispatchToProps) (SignedInOptions)","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedOutOptions = () => {\n    return(\n        <ul className='right navigation-links'>\n            <li><NavLink to='/signin'>Sign In</NavLink></li>\n            <li><NavLink to='/signup'>Sign Up</NavLink></li>\n        </ul>\n    )\n}\n\nexport default SignedOutOptions","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport SignedInOptions from './SignedInOptions';\nimport SignedOutOptions from './SignedOutOptions';\n\nconst Navbar = (props) => {\n    console.log(props)\n    //logic to verify auth status and show links accordingly//\n    let visibleLinks\n    if(props.auth.uid){\n        visibleLinks = <SignedInOptions />\n    }else{\n        visibleLinks = <SignedOutOptions />\n    }\n\n    return(\n        <nav>   \n            <div className='nav-wrapper'>\n                <Link to='/' className=' left brand-logo'>Planogram</Link>\n                {visibleLinks}\n            </div>\n        </nav>\n    )\n}   \n\nconst mapStateToProps = (state) => {\n    return{\n        auth: state.firebase.auth\n    }\n}\n export default connect(mapStateToProps) (Navbar)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { addProject } from '../../store/actions/projectActions';\n\nexport class CreateProject extends Component {\n\n    state = {\n        title: '',\n        content: ''\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.addProject(this.state)\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.id] :e.target.value\n        })\n    }\n\n    render() {\n        const {auth} = this.props\n        // for route guarding//\n        if(!auth.uid) return <Redirect to='/signin'/>\n        // -----------------//\n        return (\n            <div className='container'>\n                <form onSubmit={this.handleSubmit} className='create-project-form'>\n                    <h4 className='text-center'>Create Project</h4>\n                    <div className='input-field'>\n                        <label htmlFor='title'>Title</label>\n                        <input type='text' id='title' onChange={this.handleInputChange}/>\n                    </div>\n                    <div className='input-field'>\n                        <label htmlFor='content'>Content</label>\n                        <textarea id='content' className='materialize-textarea' onChange={this.handleInputChange} />\n                    </div>\n                    <div className='input-field'>\n                        <button className='btn lighten-1'>Save</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        auth: state.firebase.auth\n    }\n}\n//connecting with action-creators//\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addProject: (project) => dispatch(addProject(project))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)\n","export const addProject = (project) => {\n    return (dispatch, getState, {getFirestore, getFirebase}) => {\n        // initiate the firestore db//\n        const db = getFirestore()\n        //get user data//\n        const profile = getState().firebase.profile\n        const userID = getState().firebase.auth.uid\n        //make async call to the db//\n        db.collection('projects').add({\n            ...project,\n            authorFirstName: profile.firstName,\n            authorLastName: profile.lastName ,\n            authorID: userID,\n            createdAt: new Date()\n        }).then(() => {\n            //dispatch the function//\n            dispatch({ type: 'ADD_PROJECT', project}) \n        }).catch(error => {\n            //logging error//\n            dispatch({ type: 'ADD_PROJECT_ERROR', error})\n        })\n    }\n}","import moment from 'moment';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { Redirect } from 'react-router-dom';\nimport { compose } from 'redux';\n\nconst ProjectDetails = (props) => {\n    const { project, auth } = props\n    // for route guarding//\n    if(!auth.uid) return <Redirect to='/signin'/>\n    // -----------------//\n    if (project){\n        return(\n            <div className='section container'>\n                <div className='card project-details'>\n                    <div className='card-content'>\n                        <span className='card-title'>{project.title}</span>\n                        <p className='project-description'>{project.content}</p>\n                    </div>\n                    <div className='card-action light-text'>\n                        <p>Added By: {project.authorFirstName} {project.authorLastName}</p>\n                        <p>{moment(project.createdAt.toDate()).format('MMM Do YYYY')}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }else{\n        return (\n            <div>Loading.....</div>\n            )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const id = ownProps.match.params.id\n    const projects = state.firestore.data.projects\n    const project = projects ? projects[id] : null\n    return{\n        project: project,\n        auth: state.firebase.auth\n    }\n}\n\nexport default compose( \n    connect(mapStateToProps),\n    firestoreConnect([\n        {collection: 'projects'}\n    ])\n    ) (ProjectDetails)\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport DashBoard from './components/dashboard/Dashboard';\nimport Navbar from './components/layout/Navbar.component';\nimport CreateProject from './components/projects/CreateProject';\nimport ProjectDetails from './components/projects/ProjectDetails';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className='App'></div>\n      <Navbar />\n      {/* Rotes */}\n      <Switch>\n        <Route exact path='/' component={DashBoard} />\n        <Route path='/projects/:id' component={ProjectDetails} />\n        <Route path='/signin' component={SignIn} />\n        <Route path='/signup' component={SignUp} />\n        <Route path='/create' component={CreateProject} /> \n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import 'firebase/auth';\nimport 'firebase/firestore';\n\nimport firebase from 'firebase/app';\n\n// app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAXGQXOJBsGUXbr9xpO_vuHEIQQEDYrM5w\",\n    authDomain: \"planogram-85f37.firebaseapp.com\",\n    databaseURL: \"https://planogram-85f37.firebaseio.com\",\n    projectId: \"planogram-85f37\",\n    storageBucket: \"planogram-85f37.appspot.com\",\n    messagingSenderId: \"686922632873\",\n    appId: \"1:686922632873:web:2a5ff112d7929787fba3b8\",\n    measurementId: \"G-QZPE0FZ8HS\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n//   firebase.analytics();\nexport default firebase","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    authError: null\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SIGN_IN_SUCCESS':\n            console.log('From AuthReducer: Sign In Success')\n            return {\n                ...state,\n                authError: null\n            }\n\n        case 'SIGN_IN_FAIL':\n            console.log('From AuthReducer: Sign In Fail')\n            return {\n                ...state,\n                authError: 'SIGN IN FAILED'\n            }\n\n        case 'SIGN_OUT_SUCCESS': \n            console.log('sign out success')\n            return state\n\n        case 'SIGN_UP_SUCCESS':\n            console.log('From authReducer: Sign Up Success')\n            return {\n                ...state,\n                authError: null\n            }\n        \n        case 'SIGN_UP_FAIL':\n            console.log('sign up error')\n            return {\n                ...state,\n                authError: action.error\n            }\n        default:\n            return state\n    }\n}\n\nexport default authReducer","const initialState = {}\n\nconst projectReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_PROJECT':\n            console.log('added new project', action.project)\n            return state\n        case 'ADD_PROJECT_ERROR':\n            console.log('error occured', action.error)\n            return state\n        default:\n            return state\n    }\n}\n\nexport default projectReducer","import { firebaseReducer } from 'react-redux-firebase';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore';\n\nimport authReducer from './authReducer';\nimport projectReducer from './projectReducer';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    project: projectReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n})\n\nexport default rootReducer","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { getFirebase, reactReduxFirebase } from 'react-redux-firebase';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { getFirestore, reduxFirestore } from 'redux-firestore';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport fbConfig from './config/fbConfig';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './store/reducers/rootReducer';\n\nconst store = createStore(rootReducer,\n    //to make this implementation of firestore and firebase to work, stick with following version redux-firestore@0.5.7, react-redux-firebase@2.1.8\n    compose(\n        applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n        reduxFirestore(fbConfig),\n        reactReduxFirebase(fbConfig, {\n            //to sync firebase auth profile with firestore user collection//\n            useFirestoreForProfile: true,\n            userProfile: 'users',\n            //for broadcast when connection with firestore auth is established\n            attachAuthIsReady: true\n        })\n    )\n) \n\n//rp render dom elements only after connection is firebase is establsihed (for better UX via avoiding glitches)\nstore.firebaseAuthIsReady.then(() => {\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}